// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: saia/v1/saia.proto

package saiav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/clementnuss/saia-pcd-exporter/gen/saia/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SaiaPcdServiceName is the fully-qualified name of the SaiaPcdService service.
	SaiaPcdServiceName = "saia.v1.SaiaPcdService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SaiaPcdServiceReadInputProcedure is the fully-qualified name of the SaiaPcdService's ReadInput
	// RPC.
	SaiaPcdServiceReadInputProcedure = "/saia.v1.SaiaPcdService/ReadInput"
	// SaiaPcdServiceReadOutputProcedure is the fully-qualified name of the SaiaPcdService's ReadOutput
	// RPC.
	SaiaPcdServiceReadOutputProcedure = "/saia.v1.SaiaPcdService/ReadOutput"
	// SaiaPcdServiceReadFlagProcedure is the fully-qualified name of the SaiaPcdService's ReadFlag RPC.
	SaiaPcdServiceReadFlagProcedure = "/saia.v1.SaiaPcdService/ReadFlag"
	// SaiaPcdServiceReadCounterProcedure is the fully-qualified name of the SaiaPcdService's
	// ReadCounter RPC.
	SaiaPcdServiceReadCounterProcedure = "/saia.v1.SaiaPcdService/ReadCounter"
	// SaiaPcdServiceReadTimerProcedure is the fully-qualified name of the SaiaPcdService's ReadTimer
	// RPC.
	SaiaPcdServiceReadTimerProcedure = "/saia.v1.SaiaPcdService/ReadTimer"
	// SaiaPcdServiceReadRegisterProcedure is the fully-qualified name of the SaiaPcdService's
	// ReadRegister RPC.
	SaiaPcdServiceReadRegisterProcedure = "/saia.v1.SaiaPcdService/ReadRegister"
	// SaiaPcdServiceWriteFlagProcedure is the fully-qualified name of the SaiaPcdService's WriteFlag
	// RPC.
	SaiaPcdServiceWriteFlagProcedure = "/saia.v1.SaiaPcdService/WriteFlag"
	// SaiaPcdServiceWriteRegisterProcedure is the fully-qualified name of the SaiaPcdService's
	// WriteRegister RPC.
	SaiaPcdServiceWriteRegisterProcedure = "/saia.v1.SaiaPcdService/WriteRegister"
)

// SaiaPcdServiceClient is a client for the saia.v1.SaiaPcdService service.
type SaiaPcdServiceClient interface {
	// Read operations
	ReadInput(context.Context, *connect.Request[v1.ReadInputRequest]) (*connect.Response[v1.ReadInputResponse], error)
	ReadOutput(context.Context, *connect.Request[v1.ReadOutputRequest]) (*connect.Response[v1.ReadOutputResponse], error)
	ReadFlag(context.Context, *connect.Request[v1.ReadFlagRequest]) (*connect.Response[v1.ReadFlagResponse], error)
	ReadCounter(context.Context, *connect.Request[v1.ReadCounterRequest]) (*connect.Response[v1.ReadCounterResponse], error)
	ReadTimer(context.Context, *connect.Request[v1.ReadTimerRequest]) (*connect.Response[v1.ReadTimerResponse], error)
	ReadRegister(context.Context, *connect.Request[v1.ReadRegisterRequest]) (*connect.Response[v1.ReadRegisterResponse], error)
	// Write operations
	WriteFlag(context.Context, *connect.Request[v1.WriteFlagRequest]) (*connect.Response[v1.WriteFlagResponse], error)
	WriteRegister(context.Context, *connect.Request[v1.WriteRegisterRequest]) (*connect.Response[v1.WriteRegisterResponse], error)
}

// NewSaiaPcdServiceClient constructs a client for the saia.v1.SaiaPcdService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSaiaPcdServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SaiaPcdServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	saiaPcdServiceMethods := v1.File_saia_v1_saia_proto.Services().ByName("SaiaPcdService").Methods()
	return &saiaPcdServiceClient{
		readInput: connect.NewClient[v1.ReadInputRequest, v1.ReadInputResponse](
			httpClient,
			baseURL+SaiaPcdServiceReadInputProcedure,
			connect.WithSchema(saiaPcdServiceMethods.ByName("ReadInput")),
			connect.WithClientOptions(opts...),
		),
		readOutput: connect.NewClient[v1.ReadOutputRequest, v1.ReadOutputResponse](
			httpClient,
			baseURL+SaiaPcdServiceReadOutputProcedure,
			connect.WithSchema(saiaPcdServiceMethods.ByName("ReadOutput")),
			connect.WithClientOptions(opts...),
		),
		readFlag: connect.NewClient[v1.ReadFlagRequest, v1.ReadFlagResponse](
			httpClient,
			baseURL+SaiaPcdServiceReadFlagProcedure,
			connect.WithSchema(saiaPcdServiceMethods.ByName("ReadFlag")),
			connect.WithClientOptions(opts...),
		),
		readCounter: connect.NewClient[v1.ReadCounterRequest, v1.ReadCounterResponse](
			httpClient,
			baseURL+SaiaPcdServiceReadCounterProcedure,
			connect.WithSchema(saiaPcdServiceMethods.ByName("ReadCounter")),
			connect.WithClientOptions(opts...),
		),
		readTimer: connect.NewClient[v1.ReadTimerRequest, v1.ReadTimerResponse](
			httpClient,
			baseURL+SaiaPcdServiceReadTimerProcedure,
			connect.WithSchema(saiaPcdServiceMethods.ByName("ReadTimer")),
			connect.WithClientOptions(opts...),
		),
		readRegister: connect.NewClient[v1.ReadRegisterRequest, v1.ReadRegisterResponse](
			httpClient,
			baseURL+SaiaPcdServiceReadRegisterProcedure,
			connect.WithSchema(saiaPcdServiceMethods.ByName("ReadRegister")),
			connect.WithClientOptions(opts...),
		),
		writeFlag: connect.NewClient[v1.WriteFlagRequest, v1.WriteFlagResponse](
			httpClient,
			baseURL+SaiaPcdServiceWriteFlagProcedure,
			connect.WithSchema(saiaPcdServiceMethods.ByName("WriteFlag")),
			connect.WithClientOptions(opts...),
		),
		writeRegister: connect.NewClient[v1.WriteRegisterRequest, v1.WriteRegisterResponse](
			httpClient,
			baseURL+SaiaPcdServiceWriteRegisterProcedure,
			connect.WithSchema(saiaPcdServiceMethods.ByName("WriteRegister")),
			connect.WithClientOptions(opts...),
		),
	}
}

// saiaPcdServiceClient implements SaiaPcdServiceClient.
type saiaPcdServiceClient struct {
	readInput     *connect.Client[v1.ReadInputRequest, v1.ReadInputResponse]
	readOutput    *connect.Client[v1.ReadOutputRequest, v1.ReadOutputResponse]
	readFlag      *connect.Client[v1.ReadFlagRequest, v1.ReadFlagResponse]
	readCounter   *connect.Client[v1.ReadCounterRequest, v1.ReadCounterResponse]
	readTimer     *connect.Client[v1.ReadTimerRequest, v1.ReadTimerResponse]
	readRegister  *connect.Client[v1.ReadRegisterRequest, v1.ReadRegisterResponse]
	writeFlag     *connect.Client[v1.WriteFlagRequest, v1.WriteFlagResponse]
	writeRegister *connect.Client[v1.WriteRegisterRequest, v1.WriteRegisterResponse]
}

// ReadInput calls saia.v1.SaiaPcdService.ReadInput.
func (c *saiaPcdServiceClient) ReadInput(ctx context.Context, req *connect.Request[v1.ReadInputRequest]) (*connect.Response[v1.ReadInputResponse], error) {
	return c.readInput.CallUnary(ctx, req)
}

// ReadOutput calls saia.v1.SaiaPcdService.ReadOutput.
func (c *saiaPcdServiceClient) ReadOutput(ctx context.Context, req *connect.Request[v1.ReadOutputRequest]) (*connect.Response[v1.ReadOutputResponse], error) {
	return c.readOutput.CallUnary(ctx, req)
}

// ReadFlag calls saia.v1.SaiaPcdService.ReadFlag.
func (c *saiaPcdServiceClient) ReadFlag(ctx context.Context, req *connect.Request[v1.ReadFlagRequest]) (*connect.Response[v1.ReadFlagResponse], error) {
	return c.readFlag.CallUnary(ctx, req)
}

// ReadCounter calls saia.v1.SaiaPcdService.ReadCounter.
func (c *saiaPcdServiceClient) ReadCounter(ctx context.Context, req *connect.Request[v1.ReadCounterRequest]) (*connect.Response[v1.ReadCounterResponse], error) {
	return c.readCounter.CallUnary(ctx, req)
}

// ReadTimer calls saia.v1.SaiaPcdService.ReadTimer.
func (c *saiaPcdServiceClient) ReadTimer(ctx context.Context, req *connect.Request[v1.ReadTimerRequest]) (*connect.Response[v1.ReadTimerResponse], error) {
	return c.readTimer.CallUnary(ctx, req)
}

// ReadRegister calls saia.v1.SaiaPcdService.ReadRegister.
func (c *saiaPcdServiceClient) ReadRegister(ctx context.Context, req *connect.Request[v1.ReadRegisterRequest]) (*connect.Response[v1.ReadRegisterResponse], error) {
	return c.readRegister.CallUnary(ctx, req)
}

// WriteFlag calls saia.v1.SaiaPcdService.WriteFlag.
func (c *saiaPcdServiceClient) WriteFlag(ctx context.Context, req *connect.Request[v1.WriteFlagRequest]) (*connect.Response[v1.WriteFlagResponse], error) {
	return c.writeFlag.CallUnary(ctx, req)
}

// WriteRegister calls saia.v1.SaiaPcdService.WriteRegister.
func (c *saiaPcdServiceClient) WriteRegister(ctx context.Context, req *connect.Request[v1.WriteRegisterRequest]) (*connect.Response[v1.WriteRegisterResponse], error) {
	return c.writeRegister.CallUnary(ctx, req)
}

// SaiaPcdServiceHandler is an implementation of the saia.v1.SaiaPcdService service.
type SaiaPcdServiceHandler interface {
	// Read operations
	ReadInput(context.Context, *connect.Request[v1.ReadInputRequest]) (*connect.Response[v1.ReadInputResponse], error)
	ReadOutput(context.Context, *connect.Request[v1.ReadOutputRequest]) (*connect.Response[v1.ReadOutputResponse], error)
	ReadFlag(context.Context, *connect.Request[v1.ReadFlagRequest]) (*connect.Response[v1.ReadFlagResponse], error)
	ReadCounter(context.Context, *connect.Request[v1.ReadCounterRequest]) (*connect.Response[v1.ReadCounterResponse], error)
	ReadTimer(context.Context, *connect.Request[v1.ReadTimerRequest]) (*connect.Response[v1.ReadTimerResponse], error)
	ReadRegister(context.Context, *connect.Request[v1.ReadRegisterRequest]) (*connect.Response[v1.ReadRegisterResponse], error)
	// Write operations
	WriteFlag(context.Context, *connect.Request[v1.WriteFlagRequest]) (*connect.Response[v1.WriteFlagResponse], error)
	WriteRegister(context.Context, *connect.Request[v1.WriteRegisterRequest]) (*connect.Response[v1.WriteRegisterResponse], error)
}

// NewSaiaPcdServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSaiaPcdServiceHandler(svc SaiaPcdServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	saiaPcdServiceMethods := v1.File_saia_v1_saia_proto.Services().ByName("SaiaPcdService").Methods()
	saiaPcdServiceReadInputHandler := connect.NewUnaryHandler(
		SaiaPcdServiceReadInputProcedure,
		svc.ReadInput,
		connect.WithSchema(saiaPcdServiceMethods.ByName("ReadInput")),
		connect.WithHandlerOptions(opts...),
	)
	saiaPcdServiceReadOutputHandler := connect.NewUnaryHandler(
		SaiaPcdServiceReadOutputProcedure,
		svc.ReadOutput,
		connect.WithSchema(saiaPcdServiceMethods.ByName("ReadOutput")),
		connect.WithHandlerOptions(opts...),
	)
	saiaPcdServiceReadFlagHandler := connect.NewUnaryHandler(
		SaiaPcdServiceReadFlagProcedure,
		svc.ReadFlag,
		connect.WithSchema(saiaPcdServiceMethods.ByName("ReadFlag")),
		connect.WithHandlerOptions(opts...),
	)
	saiaPcdServiceReadCounterHandler := connect.NewUnaryHandler(
		SaiaPcdServiceReadCounterProcedure,
		svc.ReadCounter,
		connect.WithSchema(saiaPcdServiceMethods.ByName("ReadCounter")),
		connect.WithHandlerOptions(opts...),
	)
	saiaPcdServiceReadTimerHandler := connect.NewUnaryHandler(
		SaiaPcdServiceReadTimerProcedure,
		svc.ReadTimer,
		connect.WithSchema(saiaPcdServiceMethods.ByName("ReadTimer")),
		connect.WithHandlerOptions(opts...),
	)
	saiaPcdServiceReadRegisterHandler := connect.NewUnaryHandler(
		SaiaPcdServiceReadRegisterProcedure,
		svc.ReadRegister,
		connect.WithSchema(saiaPcdServiceMethods.ByName("ReadRegister")),
		connect.WithHandlerOptions(opts...),
	)
	saiaPcdServiceWriteFlagHandler := connect.NewUnaryHandler(
		SaiaPcdServiceWriteFlagProcedure,
		svc.WriteFlag,
		connect.WithSchema(saiaPcdServiceMethods.ByName("WriteFlag")),
		connect.WithHandlerOptions(opts...),
	)
	saiaPcdServiceWriteRegisterHandler := connect.NewUnaryHandler(
		SaiaPcdServiceWriteRegisterProcedure,
		svc.WriteRegister,
		connect.WithSchema(saiaPcdServiceMethods.ByName("WriteRegister")),
		connect.WithHandlerOptions(opts...),
	)
	return "/saia.v1.SaiaPcdService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SaiaPcdServiceReadInputProcedure:
			saiaPcdServiceReadInputHandler.ServeHTTP(w, r)
		case SaiaPcdServiceReadOutputProcedure:
			saiaPcdServiceReadOutputHandler.ServeHTTP(w, r)
		case SaiaPcdServiceReadFlagProcedure:
			saiaPcdServiceReadFlagHandler.ServeHTTP(w, r)
		case SaiaPcdServiceReadCounterProcedure:
			saiaPcdServiceReadCounterHandler.ServeHTTP(w, r)
		case SaiaPcdServiceReadTimerProcedure:
			saiaPcdServiceReadTimerHandler.ServeHTTP(w, r)
		case SaiaPcdServiceReadRegisterProcedure:
			saiaPcdServiceReadRegisterHandler.ServeHTTP(w, r)
		case SaiaPcdServiceWriteFlagProcedure:
			saiaPcdServiceWriteFlagHandler.ServeHTTP(w, r)
		case SaiaPcdServiceWriteRegisterProcedure:
			saiaPcdServiceWriteRegisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSaiaPcdServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSaiaPcdServiceHandler struct{}

func (UnimplementedSaiaPcdServiceHandler) ReadInput(context.Context, *connect.Request[v1.ReadInputRequest]) (*connect.Response[v1.ReadInputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("saia.v1.SaiaPcdService.ReadInput is not implemented"))
}

func (UnimplementedSaiaPcdServiceHandler) ReadOutput(context.Context, *connect.Request[v1.ReadOutputRequest]) (*connect.Response[v1.ReadOutputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("saia.v1.SaiaPcdService.ReadOutput is not implemented"))
}

func (UnimplementedSaiaPcdServiceHandler) ReadFlag(context.Context, *connect.Request[v1.ReadFlagRequest]) (*connect.Response[v1.ReadFlagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("saia.v1.SaiaPcdService.ReadFlag is not implemented"))
}

func (UnimplementedSaiaPcdServiceHandler) ReadCounter(context.Context, *connect.Request[v1.ReadCounterRequest]) (*connect.Response[v1.ReadCounterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("saia.v1.SaiaPcdService.ReadCounter is not implemented"))
}

func (UnimplementedSaiaPcdServiceHandler) ReadTimer(context.Context, *connect.Request[v1.ReadTimerRequest]) (*connect.Response[v1.ReadTimerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("saia.v1.SaiaPcdService.ReadTimer is not implemented"))
}

func (UnimplementedSaiaPcdServiceHandler) ReadRegister(context.Context, *connect.Request[v1.ReadRegisterRequest]) (*connect.Response[v1.ReadRegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("saia.v1.SaiaPcdService.ReadRegister is not implemented"))
}

func (UnimplementedSaiaPcdServiceHandler) WriteFlag(context.Context, *connect.Request[v1.WriteFlagRequest]) (*connect.Response[v1.WriteFlagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("saia.v1.SaiaPcdService.WriteFlag is not implemented"))
}

func (UnimplementedSaiaPcdServiceHandler) WriteRegister(context.Context, *connect.Request[v1.WriteRegisterRequest]) (*connect.Response[v1.WriteRegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("saia.v1.SaiaPcdService.WriteRegister is not implemented"))
}
